%%% % DO NOT EDIT: this file was generated by 'just codegen'
%%% % @generated SignedSource<<36a441bfb4f3e6181fd819b046d0e31f>>
%%% % @format
%%%-----------------------------------------------------------------------------
%%% Copyright (c) Meta Platforms, Inc. and affiliates.
%%% Copyright (c) WhatsApp LLC
%%%
%%% This source code is licensed under the MIT license found in the
%%% LICENSE.md file in the root directory of this source tree.
%%%-----------------------------------------------------------------------------
-module(erldist_filter_nif_types).
-moduledoc """
""".
-moduledoc #{author => ["Andrew Bennett <potatosaladx@meta.com>"]}.
-moduledoc #{created => "2025-08-13", modified => "2025-08-13"}.
-moduledoc #{copyright => "Meta Platforms, Inc. and affiliates."}.
-compile(warn_missing_spec_all).
-oncall("whatsapp_clr").

%% Types
-type altact_sig_flags() :: #{
    'ERTS_DOP_ALTACT_SIG_FLG_PRIO' := flag(),
    'ERTS_DOP_ALTACT_SIG_FLG_TOKEN' := flag(),
    'ERTS_DOP_ALTACT_SIG_FLG_ALIAS' := flag(),
    'ERTS_DOP_ALTACT_SIG_FLG_NAME' := flag(),
    'ERTS_DOP_ALTACT_SIG_FLG_EXIT' := flag()
}.
-type channel_stats() :: #{
    'packet_count' := non_neg_integer(),
    'emit_count' := non_neg_integer(),
    'drop_count' := non_neg_integer(),
    'dist_header_count' := non_neg_integer(),
    'dist_frag_header_count' := non_neg_integer(),
    'dist_frag_cont_count' := non_neg_integer(),
    'dist_pass_through_count' := non_neg_integer(),
    'dist_tick_count' := non_neg_integer(),
    'atom_cache_read_count' := non_neg_integer(),
    'atom_cache_write_count' := non_neg_integer(),
    'atom_cache_overwrite_count' := non_neg_integer(),
    'rewrite_fragment_header_count' := non_neg_integer(),
    'rollback_atom_cache_count' := non_neg_integer(),
    'compact_external_count' := non_neg_integer(),
    'compact_fragment_count' := non_neg_integer(),
    'control_has_export_ext' := non_neg_integer(),
    'control_has_new_fun_ext' := non_neg_integer(),
    'payload_has_export_ext' := non_neg_integer(),
    'payload_has_new_fun_ext' := non_neg_integer(),
    'fastpath' := non_neg_integer(),
    'slowpath' := non_neg_integer(),
    'dop_link' := dop_stats(),
    'dop_send' := dop_stats(),
    'dop_exit' := dop_stats(),
    'dop_unlink' := dop_stats(),
    'dop_reg_send' := dop_stats(),
    'dop_group_leader' := dop_stats(),
    'dop_exit2' := dop_stats(),
    'dop_send_tt' := dop_stats(),
    'dop_exit_tt' := dop_stats(),
    'dop_reg_send_tt' := dop_stats(),
    'dop_exit2_tt' := dop_stats(),
    'dop_monitor_p' := dop_stats(),
    'dop_demonitor_p' := dop_stats(),
    'dop_monitor_p_exit' := dop_stats(),
    'dop_send_sender' := dop_stats(),
    'dop_send_sender_tt' := dop_stats(),
    'dop_payload_exit' := dop_stats(),
    'dop_payload_exit_tt' := dop_stats(),
    'dop_payload_exit2' := dop_stats(),
    'dop_payload_exit2_tt' := dop_stats(),
    'dop_payload_monitor_p_exit' := dop_stats(),
    'dop_spawn_request' := dop_stats(),
    'dop_spawn_request_tt' := dop_stats(),
    'dop_spawn_reply' := dop_stats(),
    'dop_spawn_reply_tt' := dop_stats(),
    'dop_alias_send' := dop_stats(),
    'dop_alias_send_tt' := dop_stats(),
    'dop_unlink_id' := dop_stats(),
    'dop_unlink_id_ack' := dop_stats(),
    'dop_altact_sig_send' := dop_stats()
}.
-type config_key() ::
    'compact_fragments'
    | 'deep_packet_inspection'
    | 'logging'
    | 'otp_name_blocklist'
    | 'redirect_dist_operations'
    | 'untrusted'.
-type config_map() :: #{
    'compact_fragments' := boolean(),
    'deep_packet_inspection' := boolean(),
    'logging' := boolean(),
    'otp_name_blocklist' := boolean(),
    'redirect_dist_operations' := boolean(),
    'untrusted' := boolean()
}.
-type config_map_set() :: #{
    'compact_fragments' => boolean(),
    'deep_packet_inspection' => boolean(),
    'logging' => boolean(),
    'otp_name_blocklist' => boolean(),
    'redirect_dist_operations' => boolean(),
    'untrusted' => boolean()
}.
-type distribution_flags() :: #{
    'DFLAG_PUBLISHED' := flag(),
    'DFLAG_ATOM_CACHE' := flag(),
    'DFLAG_EXTENDED_REFERENCES' := flag(),
    'DFLAG_DIST_MONITOR' := flag(),
    'DFLAG_FUN_TAGS' := flag(),
    'DFLAG_DIST_MONITOR_NAME' := flag(),
    'DFLAG_HIDDEN_ATOM_CACHE' := flag(),
    'DFLAG_NEW_FUN_TAGS' := flag(),
    'DFLAG_EXTENDED_PIDS_PORTS' := flag(),
    'DFLAG_EXPORT_PTR_TAG' := flag(),
    'DFLAG_BIT_BINARIES' := flag(),
    'DFLAG_NEW_FLOATS' := flag(),
    'DFLAG_UNICODE_IO' := flag(),
    'DFLAG_DIST_HDR_ATOM_CACHE' := flag(),
    'DFLAG_SMALL_ATOM_TAGS' := flag(),
    'DFLAG_ETS_COMPRESSED' := flag(),
    'DFLAG_UTF8_ATOMS' := flag(),
    'DFLAG_MAP_TAG' := flag(),
    'DFLAG_BIG_CREATION' := flag(),
    'DFLAG_SEND_SENDER' := flag(),
    'DFLAG_BIG_SEQTRACE_LABELS' := flag(),
    'DFLAG_PENDING_CONNECT' := flag(),
    'DFLAG_EXIT_PAYLOAD' := flag(),
    'DFLAG_FRAGMENTS' := flag(),
    'DFLAG_HANDSHAKE_23' := flag(),
    'DFLAG_UNLINK_ID' := flag(),
    'DFLAG_MANDATORY_25_DIGEST' := flag(),
    'DFLAG_RESERVED' := flag(),
    'DFLAG_SPAWN' := flag(),
    'DFLAG_NAME_ME' := flag(),
    'DFLAG_V4_NC' := flag(),
    'DFLAG_ALIAS' := flag(),
    'DFLAG_LOCAL_EXT' := flag(),
    'DFLAG_ALTACT_SIG' := flag(),
    'DFLAG_DETERMINISTIC' := flag(),
    'DFLAG_DIST_MANDATORY_25' := flag(),
    'DFLAG_DIST_MANDATORY_26' := flag(),
    'DFLAG_DIST_MANDATORY' := flag(),
    'DFLAG_DIST_HOPEFULLY' := flag(),
    'DFLAG_DIST_DEFAULT' := flag(),
    'DFLAG_DIST_ADDABLE' := flag(),
    'DFLAG_DIST_REJECTABLE' := flag(),
    'DFLAG_DIST_STRICT_ORDER' := flag(),
    'TERM_TO_BINARY_DFLAGS' := flag()
}.
-type dop_stats() :: #{
    seen := non_neg_integer(),
    emit := non_neg_integer(),
    drop := non_neg_integer()
}.
-type flag() :: 0..16#ffffffffffffffff.
-type spawn_flags() :: #{
    'ERTS_DIST_SPAWN_FLAG_LINK' := flag(),
    'ERTS_DIST_SPAWN_FLAG_MONITOR' := flag()
}.

-export_type([
    altact_sig_flags/0,
    channel_stats/0,
    config_key/0,
    config_map/0,
    config_map_set/0,
    distribution_flags/0,
    dop_stats/0,
    flag/0,
    spawn_flags/0
]).
